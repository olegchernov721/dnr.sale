`use strict`

const local = navigator.language;

const optionsDate = {
  year: "numeric",
  month: "short",
  day: "numeric",
  hour: "numeric",
  minute: "numeric",
  second: "numeric",
}



// Элеиенты страницы

// Дата и время в дашборде

const currentDate = document.querySelector(".dashboard__time-today");



const dashboardWeather = document.querySelector(".dashboard__weather");

// Инпут даты и времени

const taskDateTime = document.querySelector(".datetime-local-task");

// Таск контейнер
const tasksContainerActive = document.querySelector(".task-manager-container-1");
const tasksContainerDelete = document.querySelector(".task-manager-container-2");

// Элементы формы
const formInput = document.querySelector(".task-manager-form__input-text");
const formTextarea = document.querySelector(".task-manager-form__input-textarea");
const formBtn = document.querySelector(".task-manager-form__add-task");

// Текст задач нет

const taskIsNot = document.querySelector(".taskIsNot");
const tabsContainer = document.querySelector(".task-manager-tabs");
// Таб удалённых элементов
const tabDeleteTask = document.querySelector(".task-tabs__delete");
// Таб действующих элементов
const tabCurrentTasks = document.querySelector(".task-tabs__active");
// Удалённые блоки задач

const taskHasClassDelete = document.querySelectorAll(".task-item_delete");

// Элементы блока с задачей
const taskItem = document.querySelector(".task-item");
const taskTitle = document.querySelector(".task-item__head-title");
const taskTimer = document.querySelector(".task-item__head-timer");
const btnDeleteTask = document.querySelector(".task-item__head-btn");

// Api текущей погоды

  const currentWeatherApi = async function () {
    const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=5bc3ac787d2845d58b380218251202&q=horlivka&lang=ru`);
    const data = await response.json();
    // console.log(data);
    
    const html = `
  
          <div class="weather__box"> 
            <i class="fa-solid fa-cloud">Погода</i>
            <h2 class="weather__title">сейчас ${data.current.condition.text}</h2>
            <div class="weather__temp">Температура воздуха: °C: ${data.current.temp_c}</div>
            <div class="weather__feeling">По ощущению: °C: ${data.current.feelslike_c}</div>
            <div class="weather__cloud">Облочность: ${data.current.cloud}%</div>
            <div class="weather__wind">Ветер: ${data.current.wind_kph} км/час</div>
          </div>
  
  `;
  
  dashboardWeather.innerHTML = "";
  dashboardWeather.insertAdjacentHTML("beforeend", html);
  
  }
  
  currentWeatherApi();
// Обновление данных погоды
  setInterval(function () {
    currentWeatherApi();
  }, 1000);




// Дата время на дашборде

function currentDateNow () {
  const date = new Date();
  const nowDay = date.getDate();
  const month = `${date.getMonth()+1}`.padStart(2, "0");
  const hour = `${date.getHours()}`.padStart(2, "0");
  const min = `${date.getMinutes()}`.padStart(2, "0");
  const sec = `${date.getSeconds()}`.padStart(2, "0");
    return`${nowDay}.${month}.${date.getFullYear()} - ${hour}:${min}:${sec}`;
}


currentDate.textContent = currentDateNow();
 setInterval(function () {
    const date = new Date();
    currentDate.textContent = currentDateNow();
    
}, 1000);




// Таск менеджер


  class Task {
    constructor(title, descr, createdAt, id, timer) {
      this.title = title;
      this.descr = descr;
      this.createdAt = createdAt;
      this.id = id;
      this.timer = timer;
    }
  }
  
  class TaskManager {

    // 1. Создать пустой массив для удалённых элементов
    // 2. Создать событие при клике на кнопку "удалить задачу"
    // 3. В событии должен удялтся илемент из массива и попадать в массив аудалённых элементов
    // 
    _tasks = [];
    _deleteTasks = [];
    newTask;
    constructor() {
      // this._removeTask.bind(this);
      formBtn.addEventListener("click", this._addTask.bind(this));
      tasksContainerActive.addEventListener("click", this._removeTask.bind(this));
      tabsContainer.addEventListener("click", this._switchTask.bind(this));
      
    }

    
    
    _addTask(e) {
      e.preventDefault();
      const title = formInput.value;
      const descr = formTextarea.value;
      const dateNow = Intl.DateTimeFormat(local, optionsDate).format(new Date());
      const id = `${this._tasks.length + 1}`.padStart(2, "0");
      const timer = taskDateTime.value;
      console.log(timer);
      
      
      this.newTask = new Task(title, descr, dateNow, id, timer);
      this._tasks.push(this.newTask);
      console.log(this._tasks);

      
      
      // console.log(this._tasks);
      this._renderTask(this.newTask);
      
      // if (this._tasks.length < 1) return;

      // Показываем нужный таб, если задачи уже есть на страницы и мы переключили таб
      document.querySelector(`[data-tasktab="2"]`).classList.remove("tab__active");
      document.querySelector(`[data-tasktab="1"]`).classList.add("tab__active");

      // Показываем нужный контейнер с задачами
      document.querySelector(".task-manager-container-2").classList.remove("task-container-active");
      document.querySelector(".task-manager-container-1").classList.add("task-container-active");


      
    }


    // Находим и удаляем нужный элемент
    _removeTask(e) {
      if (!e.target.classList.contains("task-item__head-btn")) return;
       const id = e.target.closest(".task-item").dataset.id;
       console.log(id);
       
       console.log(this._tasks);
       
      //  const task = this._tasks.find((t) => t.id === id);
      //  console.log(task);

      // Узнаю индекс элемента на котором была нажата кнопка
      const index = this._tasks.findIndex((task) => {
        return task.id === id;
      });
      // Помещаю элемент с таким же id как на том где нажата кнопка
      const task = this._tasks.find((task) => {
        return task.id === id;
      });
       
       this._deleteTasks.push(task);
       this._tasks.splice(index, 1);

       console.log(this._deleteTasks);

      //  this._tasks.forEach((task) => {
      //   this._renderTask(task);
      //  });

      //  Удаляю блок задачи, в котором нажали кнопку удалить

       const deleteTask = e.target.closest(".task-item");
       deleteTask.classList.add("hidden__scale");
   
       setTimeout(function () {
        deleteTask.classList.add("hidden");
       }, 300);
       console.log(deleteTask);
       
      
      //  счёт удалённых задач
      tabDeleteTask.textContent = `Удалённые задачи(-${this._deleteTasks.length})`;
      tabCurrentTasks.textContent = `Активные задачи(+${this._tasks.length})`;
  
      //  console.log(this._deleteTasks); // Некоторые задачи-объекты в этом массиве почему то undefined , почему? - Если я наживаю на кнопку удалить слишком быстро, то записывается undefined, видимо не успевает прийти. 
      //  Но счёт удалённых идёт правильно, может просто не успевает обновится?
       
      }
      // Переключатель табов и показ нужных контейнеров
      _switchTask(e) {
        e.preventDefault();
        const clickend = e.target.closest(".tab-item");
        console.log(clickend);
        if (!clickend) return;

        document.querySelectorAll(".tab-item").forEach(function (tab) {
          tab.classList.remove("tab__active");
          clickend.classList.add("tab__active");
        });

        document.querySelectorAll(".task-manager-cont").forEach(function (container) {
          container.classList.remove("task-container-active");
          container.classList.add("hidden");
        document.querySelector(`.task-manager-container-${clickend.dataset.tasktab}`)
        .classList.add("task-container-active");
        });

        tasksContainerDelete.innerHTML = "";
        this._removeDeleteTask(this._deleteTasks);


        // плохая верися
        // const thisCopi = this;
        // if (e.target.classList.contains("task-tabs__delete")) {
        //   tabDeleteTask.classList.add("tab__active");
        //   tabCurrentTasks.classList.remove("tab__active");
          
          
        //   thisCopi._deleteTasks.forEach(function (task) {
        //     thisCopi._removeDeleteTask(task);
        //   });

        //   tasksContainerDelete.classList.remove("hidden");
        //   tasksContainerDelete.classList.add("task-container-active");
        //   tasksContainerActive.classList.add("hidden");

  
        // } else if (e.target.classList.contains("task-tabs__active")) {
        //   tabDeleteTask.classList.remove("tab__active");
        //   tabCurrentTasks.classList.add("tab__active");

          
        //   thisCopi._tasks.forEach(function (task) {
        //     thisCopi._renderTask(task);
        //   });

        //   tasksContainerDelete.classList.add("hidden");
        //   tasksContainerActive.classList.remove("hidden");
        //   tasksContainerActive.classList.add("task-container-active");

        // }
        // // const btnActive = e.target.classList.contains("task-tabs__active");
        // // console.log(btnActive);
        
      }

    // _deadLineTask() {
      
    // }



    _renderTask(task) {
    
      let html = `
      
      <div class="task-manager__container-item task-item" data-id="${task.id}">
      <div class="task-item__head">
        <div class="task-item__head-title"><span> id:${task.id}:</span> ${task.title}</div>
        <div class="task-item__head-timer"></div>
        <button class="task-item__head-btn">удалить задачу</button>
      </div>
      <div class="task-item__descr">${task.descr}</div>
      <div class="task-item__date">${task.createdAt}</div>
    </div>

    `;


    if (taskIsNot) {
      taskIsNot.remove();
    } 

    if (tabDeleteTask.classList.contains("tab__active")) {
      taskHasClassDelete.forEach((val) => val.classList.add("hidden__scale"));
   
       setTimeout(function () {
        taskHasClassDelete.forEach((val) => val.classList.add("hidden"));
       }, 300);
    }

    tasksContainerActive.insertAdjacentHTML("afterbegin", html);
    tabCurrentTasks.textContent = `Активные задачи(+${this._tasks.length})`;

    // if (!taskItem) return;
    this._renderTaskTimer(task);
    }


 

  _removeDeleteTask(tasks) {
  console.log(tasks);
  
    
    tasks.forEach(function (task) {
      let html = `
      
      <div class="task-manager__container-item task-item task-item_delete" data-id="${task.id}">
      <div class="task-item__head">
        <div class="task-item__head-title"><span> id:${task.id}:</span> ${task.title}</div>
        <div class="task-item__head-timer">Осталось  <span>1</span> дней, <span>23</span> часов, <span>15</span> мин, <span>35</span> сек</div>
        
      </div>
      <div class="task-item__descr">${task.descr}</div>
      <div class="task-item__date">${task.createdAt}</div>
    </div>

    `;

    // if (taskIsNot) {
    //   taskIsNot.remove();
    // } 

    tasksContainerDelete.insertAdjacentHTML("afterbegin", html);
    });

  }

    
  _renderTaskTimer(task) {
    function tick () {
      const milliseconds = Date.parse(this.timer);
      let timeSec = (milliseconds - Date.now()) / 1000; 
      // console.log(timeSec);

      const day = timeSec / 60 / 60 / 24;
      const secAllDay = (60 * 60 * 24) * Math.floor(day);
      // console.log(secAllDay);
      console.log(Math.floor(day));

      const hour = `${Math.floor((timeSec - secAllDay) / 60 / 60)}`.padStart(2, "0");
      const secAllHour = (60 * 60) * Math.floor(hour);
      // console.log(Math.floor(hour));
      console.log(hour);
      // console.log(secAllHour);
      
      const min = `${Math.floor((timeSec - secAllDay - secAllHour) / 60)}`.padStart(2, "0");
      const secAllmin = 60 * Math.floor(min);
      // console.log(Math.floor(min));
      console.log(min);
      
      
      const sec = `${Math.floor(timeSec - secAllDay - secAllHour - secAllmin)}`.padStart(2, "0");
      // console.log(Math.floor(sec));
      console.log(sec);

      taskTimer.textContent = `Осталось дней: ${day}, часов: ${hour}, минут: ${min}, секунд: ${sec}`;
      timeSec -= 1;
  }

const timer = setInterval(tick.bind(task), 1000);
  }
    

  }

  const newTask = new TaskManager();

  // const newTask = new TaskManager();

 





// const forecastWeatherApi = fetch(`https://api.weatherapi.com/v1/forecast.json?key=5bc3ac787d2845d58b380218251202&q=horlivka&lang=ru`)
// .then(function (response) {
//   return response.json();
// }).then(function (data) {
//   console.log(data);
// });

// console.log(forecastWeatherApi);




